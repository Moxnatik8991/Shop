// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.BackApp.Domain;

#nullable disable

namespace Shop.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240415184446_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c93072b6-1b64-46f0-93fa-a5d469bcac3e"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Ноутбуки и компьютеры"
                        },
                        new
                        {
                            Id = new Guid("2038d26f-5e75-47d4-a9d8-96c3ee65614e"),
                            CategoryId = new Guid("c93072b6-1b64-46f0-93fa-a5d469bcac3e"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Ноутбуки"
                        },
                        new
                        {
                            Id = new Guid("32848577-ec7c-4f66-a565-d4f18bbe18c0"),
                            CategoryId = new Guid("c93072b6-1b64-46f0-93fa-a5d469bcac3e"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Компьютеры"
                        },
                        new
                        {
                            Id = new Guid("5963ee91-d82b-472c-b9e8-f7d9f130058b"),
                            CategoryId = new Guid("c93072b6-1b64-46f0-93fa-a5d469bcac3e"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Мониторы"
                        },
                        new
                        {
                            Id = new Guid("50243bdd-d017-4819-8945-185903d7b9f3"),
                            CategoryId = new Guid("c93072b6-1b64-46f0-93fa-a5d469bcac3e"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Планшеты"
                        },
                        new
                        {
                            Id = new Guid("7d82a637-67ef-430c-b69b-34c963a4a676"),
                            CategoryId = new Guid("c93072b6-1b64-46f0-93fa-a5d469bcac3e"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Компьютерные комплектующие"
                        },
                        new
                        {
                            Id = new Guid("e4d20234-d778-482d-b225-062431f225f0"),
                            CategoryId = new Guid("7d82a637-67ef-430c-b69b-34c963a4a676"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Материнские платы"
                        },
                        new
                        {
                            Id = new Guid("4085d12f-2c23-4e4b-bc3d-06bd8f608bc0"),
                            CategoryId = new Guid("7d82a637-67ef-430c-b69b-34c963a4a676"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Процессоры"
                        },
                        new
                        {
                            Id = new Guid("5646833e-fdc3-4fd5-8574-76b4976a5489"),
                            CategoryId = new Guid("7d82a637-67ef-430c-b69b-34c963a4a676"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Оперативная память"
                        },
                        new
                        {
                            Id = new Guid("0abb8879-1b37-470a-98b2-e76d16460ea1"),
                            CategoryId = new Guid("7d82a637-67ef-430c-b69b-34c963a4a676"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Видеокарты"
                        },
                        new
                        {
                            Id = new Guid("ef9c08bb-a63e-477d-8fe8-f894f4b9a7be"),
                            CategoryId = new Guid("7d82a637-67ef-430c-b69b-34c963a4a676"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Звуковые карты"
                        },
                        new
                        {
                            Id = new Guid("0c51b1cb-5ea5-42e9-a77f-18a9d9770e01"),
                            CategoryId = new Guid("7d82a637-67ef-430c-b69b-34c963a4a676"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Жесткие диски"
                        },
                        new
                        {
                            Id = new Guid("3d46de99-2722-41c4-9fc3-03ed22704bdf"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Смартфоны, ТВ и Электроника"
                        },
                        new
                        {
                            Id = new Guid("631a575d-f330-4506-8305-b130d646230d"),
                            CategoryId = new Guid("3d46de99-2722-41c4-9fc3-03ed22704bdf"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Мобильные телефоны"
                        },
                        new
                        {
                            Id = new Guid("f0c52d78-3add-45a2-8160-211f6afbc79a"),
                            CategoryId = new Guid("3d46de99-2722-41c4-9fc3-03ed22704bdf"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Телевизоры"
                        },
                        new
                        {
                            Id = new Guid("766d1a76-2c19-45ca-af85-1e61e4d73710"),
                            CategoryId = new Guid("3d46de99-2722-41c4-9fc3-03ed22704bdf"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Наушники и аксессуары"
                        },
                        new
                        {
                            Id = new Guid("f45d39c1-e9ea-4220-a7d4-90222133bbaf"),
                            CategoryId = new Guid("3d46de99-2722-41c4-9fc3-03ed22704bdf"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Носимые гаджеты"
                        },
                        new
                        {
                            Id = new Guid("198008bb-ba9c-4d12-82ba-b1160396ed8e"),
                            CategoryId = new Guid("f45d39c1-e9ea-4220-a7d4-90222133bbaf"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Смарт-часы"
                        },
                        new
                        {
                            Id = new Guid("df6a3929-fe6c-4c70-85cf-89f92ebb05c8"),
                            CategoryId = new Guid("f45d39c1-e9ea-4220-a7d4-90222133bbaf"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "3D и VR очки"
                        },
                        new
                        {
                            Id = new Guid("55dcf70f-747f-4af7-bed8-5d2d9f9a21b2"),
                            CategoryId = new Guid("f45d39c1-e9ea-4220-a7d4-90222133bbaf"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Фитнес-браслеты"
                        },
                        new
                        {
                            Id = new Guid("3a0c91d1-890f-481b-aa5a-591f534256fb"),
                            CategoryId = new Guid("f45d39c1-e9ea-4220-a7d4-90222133bbaf"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Name = "Смарт-кольца"
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.FileDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FileDetails");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("CountComments")
                        .HasColumnType("bigint");

                    b.Property<long>("CountViews")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b2378bc7-1989-45f1-98db-f671b91e9b49"),
                            CategoryId = new Guid("f0c52d78-3add-45a2-8160-211f6afbc79a"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 10, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 13, 4, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Burns for 10 hours",
                            Name = "Lamp",
                            Price = 11.11m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        },
                        new
                        {
                            Id = new Guid("15d774af-8c31-42d6-a72a-c7687d520980"),
                            CategoryId = new Guid("0c51b1cb-5ea5-42e9-a77f-18a9d9770e01"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 13, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 10, 9, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Rubber under your foot",
                            Name = "Slippers",
                            Price = 11.11m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        },
                        new
                        {
                            Id = new Guid("53c717f5-45ba-4e59-b6a8-c3ebd01435f5"),
                            CategoryId = new Guid("50243bdd-d017-4819-8945-185903d7b9f3"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 14, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 14, 17, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Description1",
                            Name = "Name1",
                            Price = 1.99m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        },
                        new
                        {
                            Id = new Guid("c2235905-4240-49e1-9474-dab7662ba1b8"),
                            CategoryId = new Guid("198008bb-ba9c-4d12-82ba-b1160396ed8e"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 13, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 13, 16, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Description2",
                            Name = "Name2",
                            Price = 2.99m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        },
                        new
                        {
                            Id = new Guid("d1f2999e-928d-4c07-af19-d0c592cd3ffb"),
                            CategoryId = new Guid("f45d39c1-e9ea-4220-a7d4-90222133bbaf"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 12, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 12, 15, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Description3",
                            Name = "Name3",
                            Price = 3.99m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        },
                        new
                        {
                            Id = new Guid("9097036b-c172-44c1-9367-6b4ad714a22b"),
                            CategoryId = new Guid("f45d39c1-e9ea-4220-a7d4-90222133bbaf"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 11, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 11, 14, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Description4",
                            Name = "Name4",
                            Price = 4.99m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        },
                        new
                        {
                            Id = new Guid("5157fe09-bc8c-4074-99cb-d3381044b143"),
                            CategoryId = new Guid("e4d20234-d778-482d-b225-062431f225f0"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 10, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 10, 13, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Description5",
                            Name = "Name5",
                            Price = 5.99m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        },
                        new
                        {
                            Id = new Guid("5a3f2801-516c-45c8-8f16-c409352d82bc"),
                            CategoryId = new Guid("2038d26f-5e75-47d4-a9d8-96c3ee65614e"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 9, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 9, 12, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Description6",
                            Name = "Name6",
                            Price = 6.99m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        },
                        new
                        {
                            Id = new Guid("5202682a-9f27-4ec2-93a2-639c5a299933"),
                            CategoryId = new Guid("32848577-ec7c-4f66-a565-d4f18bbe18c0"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 8, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 8, 11, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Description7",
                            Name = "Name7",
                            Price = 7.99m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        },
                        new
                        {
                            Id = new Guid("044ac488-3564-4201-8ddd-7e72c48ae515"),
                            CategoryId = new Guid("5646833e-fdc3-4fd5-8574-76b4976a5489"),
                            CountComments = 0L,
                            CountViews = 0L,
                            DataCreate = new DateTime(2024, 4, 7, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 9, 10, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Description = "Description8",
                            Name = "Name8",
                            Price = 8.99m,
                            Rating = 0m,
                            UserId = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf")
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("04067cd2-c6e1-4f1d-9f96-71172e1498bf"),
                            DataCreate = new DateTime(2024, 3, 31, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            DataUpdate = new DateTime(2024, 4, 5, 18, 44, 46, 682, DateTimeKind.Utc).AddTicks(3312),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "wgB5A9ch/MTqSCLxGxuH7SCuUDVa6rhaxMpBO7fEQuc=",
                            PasswordSalt = "rH8Kqo+A3QYrv+7JdFPj7g=="
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.CategoryFileDetails", b =>
                {
                    b.HasBaseType("Shop.BackApp.Domain.Entity.FileDetails");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("CategoryFileDetails");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.ProductFileDetailse", b =>
                {
                    b.HasBaseType("Shop.BackApp.Domain.Entity.FileDetails");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("ProductFileDetailse");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Product", null)
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.CategoryFileDetails", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithOne("File")
                        .HasForeignKey("Shop.BackApp.Domain.Entity.CategoryFileDetails", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.ProductFileDetailse", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Product", null)
                        .WithMany("Files")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
