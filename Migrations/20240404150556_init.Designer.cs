// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.BackApp.Domain;

#nullable disable

namespace Shop.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240404150556_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6afd4706-6cd6-419b-8a56-7e8986339a5b"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Ноутбуки и компьютеры"
                        },
                        new
                        {
                            Id = new Guid("d33937dd-5aaa-4c42-b82f-bf41d6c49f55"),
                            CategoryId = new Guid("6afd4706-6cd6-419b-8a56-7e8986339a5b"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Ноутбуки"
                        },
                        new
                        {
                            Id = new Guid("b4718b50-4cdb-4ffe-864d-bd877c973b50"),
                            CategoryId = new Guid("6afd4706-6cd6-419b-8a56-7e8986339a5b"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Компьютеры"
                        },
                        new
                        {
                            Id = new Guid("bb7fe3ea-3ec4-4a8e-9663-6a7a6badef9e"),
                            CategoryId = new Guid("6afd4706-6cd6-419b-8a56-7e8986339a5b"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Мониторы"
                        },
                        new
                        {
                            Id = new Guid("b2a308e0-1254-4d09-9da6-faedf917b966"),
                            CategoryId = new Guid("6afd4706-6cd6-419b-8a56-7e8986339a5b"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Планшеты"
                        },
                        new
                        {
                            Id = new Guid("122c1210-02bd-4a26-a847-7d6a13f2789f"),
                            CategoryId = new Guid("6afd4706-6cd6-419b-8a56-7e8986339a5b"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Компьютерные комплектующие"
                        },
                        new
                        {
                            Id = new Guid("c52e5928-ac2d-477c-80fc-a9287c12e583"),
                            CategoryId = new Guid("122c1210-02bd-4a26-a847-7d6a13f2789f"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Материнские платы"
                        },
                        new
                        {
                            Id = new Guid("4fee6413-a4ef-4a2c-924e-423290594197"),
                            CategoryId = new Guid("122c1210-02bd-4a26-a847-7d6a13f2789f"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Процессоры"
                        },
                        new
                        {
                            Id = new Guid("9c5d20af-ceab-4d57-9643-af5e259c37d9"),
                            CategoryId = new Guid("122c1210-02bd-4a26-a847-7d6a13f2789f"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Оперативная память"
                        },
                        new
                        {
                            Id = new Guid("3b0eb85c-1881-43c2-a1df-eb3b7054f063"),
                            CategoryId = new Guid("122c1210-02bd-4a26-a847-7d6a13f2789f"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Видеокарты"
                        },
                        new
                        {
                            Id = new Guid("b69aaf33-c276-4bcf-9e03-bf46116a03e3"),
                            CategoryId = new Guid("122c1210-02bd-4a26-a847-7d6a13f2789f"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Звуковые карты"
                        },
                        new
                        {
                            Id = new Guid("ec8ec436-694b-47ae-b0d9-2c826f1137d5"),
                            CategoryId = new Guid("122c1210-02bd-4a26-a847-7d6a13f2789f"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Жесткие диски"
                        },
                        new
                        {
                            Id = new Guid("c4268fe7-1b53-4431-85ee-c701b89be5cb"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Смартфоны, ТВ и Электроника"
                        },
                        new
                        {
                            Id = new Guid("679fae86-6bcc-434a-a50b-78baa1c90ed0"),
                            CategoryId = new Guid("c4268fe7-1b53-4431-85ee-c701b89be5cb"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Мобильные телефоны"
                        },
                        new
                        {
                            Id = new Guid("c542ba13-6610-4e03-94c5-2273c4a6ed12"),
                            CategoryId = new Guid("c4268fe7-1b53-4431-85ee-c701b89be5cb"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Телевизоры"
                        },
                        new
                        {
                            Id = new Guid("29742df9-ca1b-4151-967d-144732bd8a31"),
                            CategoryId = new Guid("c4268fe7-1b53-4431-85ee-c701b89be5cb"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Наушники и аксессуары"
                        },
                        new
                        {
                            Id = new Guid("2ab81582-bc0b-4c4b-bb90-3907a832cb41"),
                            CategoryId = new Guid("c4268fe7-1b53-4431-85ee-c701b89be5cb"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Носимые гаджеты"
                        },
                        new
                        {
                            Id = new Guid("4e85c7a5-ad1c-4717-81e3-0ba5a9b467ef"),
                            CategoryId = new Guid("2ab81582-bc0b-4c4b-bb90-3907a832cb41"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Смарт-часы"
                        },
                        new
                        {
                            Id = new Guid("c96718ba-4407-48ea-8604-641d420a3a16"),
                            CategoryId = new Guid("2ab81582-bc0b-4c4b-bb90-3907a832cb41"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "3D и VR очки"
                        },
                        new
                        {
                            Id = new Guid("269fe930-0708-4335-bf2a-4683e3982045"),
                            CategoryId = new Guid("2ab81582-bc0b-4c4b-bb90-3907a832cb41"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Фитнес-браслеты"
                        },
                        new
                        {
                            Id = new Guid("75c1a818-e0ba-4384-8ca8-728f2c99ecdd"),
                            CategoryId = new Guid("2ab81582-bc0b-4c4b-bb90-3907a832cb41"),
                            DataCreate = new DateTime(2024, 3, 21, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Name = "Смарт-кольца"
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.FileDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FileDetails");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07ccc501-34b4-487b-a0d0-cc6ed7bb5e2f"),
                            CategoryId = new Guid("3b0eb85c-1881-43c2-a1df-eb3b7054f063"),
                            DataCreate = new DateTime(2024, 3, 30, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 4, 2, 1, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Burns for 10 hours",
                            Name = "Lamp",
                            Price = 11.11m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        },
                        new
                        {
                            Id = new Guid("e5d76e6a-1e3a-4507-85db-39c0d7189fcb"),
                            CategoryId = new Guid("b69aaf33-c276-4bcf-9e03-bf46116a03e3"),
                            DataCreate = new DateTime(2024, 4, 2, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 30, 6, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Rubber under your foot",
                            Name = "Slippers",
                            Price = 11.11m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        },
                        new
                        {
                            Id = new Guid("bb0adcea-28a3-4b2f-b05b-05a53b30b29f"),
                            CategoryId = new Guid("122c1210-02bd-4a26-a847-7d6a13f2789f"),
                            DataCreate = new DateTime(2024, 4, 3, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 4, 3, 14, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Description1",
                            Name = "Name1",
                            Price = 1.99m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        },
                        new
                        {
                            Id = new Guid("7527660d-90c8-4fec-932b-35d0407fbd25"),
                            CategoryId = new Guid("3b0eb85c-1881-43c2-a1df-eb3b7054f063"),
                            DataCreate = new DateTime(2024, 4, 2, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 4, 2, 13, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Description2",
                            Name = "Name2",
                            Price = 2.99m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        },
                        new
                        {
                            Id = new Guid("6c0b08c9-5de6-4d75-8835-4f64a6570ff0"),
                            CategoryId = new Guid("4e85c7a5-ad1c-4717-81e3-0ba5a9b467ef"),
                            DataCreate = new DateTime(2024, 4, 1, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 4, 1, 12, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Description3",
                            Name = "Name3",
                            Price = 3.99m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        },
                        new
                        {
                            Id = new Guid("1fee9896-7177-4807-b4d2-c8d309b88abf"),
                            CategoryId = new Guid("6afd4706-6cd6-419b-8a56-7e8986339a5b"),
                            DataCreate = new DateTime(2024, 3, 31, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 31, 11, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Description4",
                            Name = "Name4",
                            Price = 4.99m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        },
                        new
                        {
                            Id = new Guid("0af5969f-f3aa-48b6-95d9-87c98de7d4a1"),
                            CategoryId = new Guid("9c5d20af-ceab-4d57-9643-af5e259c37d9"),
                            DataCreate = new DateTime(2024, 3, 30, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 30, 10, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Description5",
                            Name = "Name5",
                            Price = 5.99m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        },
                        new
                        {
                            Id = new Guid("fce98e16-6837-4489-8b7b-e0385a772abf"),
                            CategoryId = new Guid("3b0eb85c-1881-43c2-a1df-eb3b7054f063"),
                            DataCreate = new DateTime(2024, 3, 29, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 29, 9, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Description6",
                            Name = "Name6",
                            Price = 6.99m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        },
                        new
                        {
                            Id = new Guid("86090135-979d-48f4-955a-89e574e782d1"),
                            CategoryId = new Guid("9c5d20af-ceab-4d57-9643-af5e259c37d9"),
                            DataCreate = new DateTime(2024, 3, 28, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 28, 8, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Description7",
                            Name = "Name7",
                            Price = 7.99m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        },
                        new
                        {
                            Id = new Guid("33d69cca-3a72-4dfa-aa2b-4ebb52daa1bc"),
                            CategoryId = new Guid("269fe930-0708-4335-bf2a-4683e3982045"),
                            DataCreate = new DateTime(2024, 3, 27, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 29, 7, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Description = "Description8",
                            Name = "Name8",
                            Price = 8.99m,
                            UserId = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306")
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c156047-cb90-4063-9bfb-a63d5877c306"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            DataUpdate = new DateTime(2024, 3, 25, 15, 5, 56, 468, DateTimeKind.Utc).AddTicks(5462),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "7cZOJ3nZdi5JwNerwfAUsRE0tTkuMc7s8/MT/aX8k50=",
                            PasswordSalt = "DH+Zw+xih0R1To6pniGu2A=="
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.CategoryFileDetails", b =>
                {
                    b.HasBaseType("Shop.BackApp.Domain.Entity.FileDetails");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("CategoryFileDetails");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.ProductFileDetailse", b =>
                {
                    b.HasBaseType("Shop.BackApp.Domain.Entity.FileDetails");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("ProductFileDetailse");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Product", null)
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.CategoryFileDetails", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithOne("File")
                        .HasForeignKey("Shop.BackApp.Domain.Entity.CategoryFileDetails", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.ProductFileDetailse", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Product", null)
                        .WithMany("Files")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
