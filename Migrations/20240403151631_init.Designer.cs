// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.BackApp.Domain;

#nullable disable

namespace Shop.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240403151631_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0e77c278-a1b1-4d98-8188-8e5aca90fdd6"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Ноутбуки и компьютеры"
                        },
                        new
                        {
                            Id = new Guid("9c552630-9d4d-4f40-a12f-0ea97aa29bd6"),
                            CategoryId = new Guid("0e77c278-a1b1-4d98-8188-8e5aca90fdd6"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Ноутбуки"
                        },
                        new
                        {
                            Id = new Guid("a8cdecde-ac08-4dae-9ce7-f1436f77bbd1"),
                            CategoryId = new Guid("0e77c278-a1b1-4d98-8188-8e5aca90fdd6"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Компьютеры"
                        },
                        new
                        {
                            Id = new Guid("260d6846-798d-41e5-9f58-a65c01e961d1"),
                            CategoryId = new Guid("0e77c278-a1b1-4d98-8188-8e5aca90fdd6"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Мониторы"
                        },
                        new
                        {
                            Id = new Guid("4e4df7fd-bdea-45ff-b141-ef8f44cdf4a1"),
                            CategoryId = new Guid("0e77c278-a1b1-4d98-8188-8e5aca90fdd6"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Планшеты"
                        },
                        new
                        {
                            Id = new Guid("7c45d5bc-a0ec-4826-b4e0-5bad631b1d30"),
                            CategoryId = new Guid("0e77c278-a1b1-4d98-8188-8e5aca90fdd6"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Компьютерные комплектующие"
                        },
                        new
                        {
                            Id = new Guid("77c0f4d9-4704-41c2-8f44-da829efa5309"),
                            CategoryId = new Guid("7c45d5bc-a0ec-4826-b4e0-5bad631b1d30"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Материнские платы"
                        },
                        new
                        {
                            Id = new Guid("4427575d-f65d-455f-bcca-b57a1bcd8356"),
                            CategoryId = new Guid("7c45d5bc-a0ec-4826-b4e0-5bad631b1d30"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Процессоры"
                        },
                        new
                        {
                            Id = new Guid("f032e4d0-4237-4102-8d5f-a73b3be48770"),
                            CategoryId = new Guid("7c45d5bc-a0ec-4826-b4e0-5bad631b1d30"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Оперативная память"
                        },
                        new
                        {
                            Id = new Guid("dea980bd-fa31-4e75-97a3-ec955a428475"),
                            CategoryId = new Guid("7c45d5bc-a0ec-4826-b4e0-5bad631b1d30"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Видеокарты"
                        },
                        new
                        {
                            Id = new Guid("b01ec4e4-df15-4dc4-8186-ef8649694b91"),
                            CategoryId = new Guid("7c45d5bc-a0ec-4826-b4e0-5bad631b1d30"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Звуковые карты"
                        },
                        new
                        {
                            Id = new Guid("ea35a1a6-d9be-4b94-a3bd-940e298c09ec"),
                            CategoryId = new Guid("7c45d5bc-a0ec-4826-b4e0-5bad631b1d30"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Жесткие диски"
                        },
                        new
                        {
                            Id = new Guid("426588c3-54d5-4f3f-bd0a-f00d5f1b22f0"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Смартфоны, ТВ и Электроника"
                        },
                        new
                        {
                            Id = new Guid("7e646336-328c-4204-93c2-93027bc84d0b"),
                            CategoryId = new Guid("426588c3-54d5-4f3f-bd0a-f00d5f1b22f0"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Мобильные телефоны"
                        },
                        new
                        {
                            Id = new Guid("55e977e6-93d4-4f46-8cb0-29a9698eec33"),
                            CategoryId = new Guid("426588c3-54d5-4f3f-bd0a-f00d5f1b22f0"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Телевизоры"
                        },
                        new
                        {
                            Id = new Guid("bdeff659-0989-4645-ab95-b4f3bf13ae60"),
                            CategoryId = new Guid("426588c3-54d5-4f3f-bd0a-f00d5f1b22f0"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Наушники и аксессуары"
                        },
                        new
                        {
                            Id = new Guid("bd77f010-5ba6-4187-90cd-a75b233e8aa8"),
                            CategoryId = new Guid("426588c3-54d5-4f3f-bd0a-f00d5f1b22f0"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Носимые гаджеты"
                        },
                        new
                        {
                            Id = new Guid("52b09263-d1d5-4a50-aff1-8f266a9a5c8f"),
                            CategoryId = new Guid("bd77f010-5ba6-4187-90cd-a75b233e8aa8"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Смарт-часы"
                        },
                        new
                        {
                            Id = new Guid("1e3ddb94-4c97-460a-96f3-c71f2ba5c29c"),
                            CategoryId = new Guid("bd77f010-5ba6-4187-90cd-a75b233e8aa8"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "3D и VR очки"
                        },
                        new
                        {
                            Id = new Guid("80b2173f-3f7a-4573-9553-055f4810d1ad"),
                            CategoryId = new Guid("bd77f010-5ba6-4187-90cd-a75b233e8aa8"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Фитнес-браслеты"
                        },
                        new
                        {
                            Id = new Guid("c98f71c2-785a-4f2c-8a16-239f4779711c"),
                            CategoryId = new Guid("bd77f010-5ba6-4187-90cd-a75b233e8aa8"),
                            DataCreate = new DateTime(2024, 3, 20, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Name = "Смарт-кольца"
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.FileDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileDetails");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.FileRelation", b =>
                {
                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("FileId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("FileRelations");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41729ee1-0b72-4807-b0ae-82a1ed635f60"),
                            CategoryId = new Guid("426588c3-54d5-4f3f-bd0a-f00d5f1b22f0"),
                            DataCreate = new DateTime(2024, 3, 29, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 4, 1, 1, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Burns for 10 hours",
                            Name = "Lamp",
                            Price = 11.11m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        },
                        new
                        {
                            Id = new Guid("2c6ce290-3b87-44c6-b1bc-9b53b8565451"),
                            CategoryId = new Guid("77c0f4d9-4704-41c2-8f44-da829efa5309"),
                            DataCreate = new DateTime(2024, 4, 1, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 29, 6, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Rubber under your foot",
                            Name = "Slippers",
                            Price = 11.11m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        },
                        new
                        {
                            Id = new Guid("0949b2e8-e02d-44fb-b00e-62239f9cf053"),
                            CategoryId = new Guid("7e646336-328c-4204-93c2-93027bc84d0b"),
                            DataCreate = new DateTime(2024, 4, 2, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 4, 2, 14, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Description1",
                            Name = "Name1",
                            Price = 1.99m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        },
                        new
                        {
                            Id = new Guid("47ea64e0-79df-4f0b-a270-712ac448dec5"),
                            CategoryId = new Guid("bd77f010-5ba6-4187-90cd-a75b233e8aa8"),
                            DataCreate = new DateTime(2024, 4, 1, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 4, 1, 13, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Description2",
                            Name = "Name2",
                            Price = 2.99m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        },
                        new
                        {
                            Id = new Guid("589ee5fb-cc68-4244-9fa4-a09fa634ea8a"),
                            CategoryId = new Guid("bdeff659-0989-4645-ab95-b4f3bf13ae60"),
                            DataCreate = new DateTime(2024, 3, 31, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 31, 12, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Description3",
                            Name = "Name3",
                            Price = 3.99m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        },
                        new
                        {
                            Id = new Guid("a61678a6-b42a-49a3-b9af-286e031c988f"),
                            CategoryId = new Guid("b01ec4e4-df15-4dc4-8186-ef8649694b91"),
                            DataCreate = new DateTime(2024, 3, 30, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 30, 11, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Description4",
                            Name = "Name4",
                            Price = 4.99m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        },
                        new
                        {
                            Id = new Guid("650cc7b4-ce5e-4949-8664-962492d41ab6"),
                            CategoryId = new Guid("ea35a1a6-d9be-4b94-a3bd-940e298c09ec"),
                            DataCreate = new DateTime(2024, 3, 29, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 29, 10, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Description5",
                            Name = "Name5",
                            Price = 5.99m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        },
                        new
                        {
                            Id = new Guid("a6220b24-d1a8-4eb3-b874-2ad5c5272316"),
                            CategoryId = new Guid("ea35a1a6-d9be-4b94-a3bd-940e298c09ec"),
                            DataCreate = new DateTime(2024, 3, 28, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 28, 9, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Description6",
                            Name = "Name6",
                            Price = 6.99m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        },
                        new
                        {
                            Id = new Guid("ae2e4f22-40f8-4ad1-abac-c4311a287628"),
                            CategoryId = new Guid("ea35a1a6-d9be-4b94-a3bd-940e298c09ec"),
                            DataCreate = new DateTime(2024, 3, 27, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 27, 8, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Description7",
                            Name = "Name7",
                            Price = 7.99m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        },
                        new
                        {
                            Id = new Guid("891008b7-89a3-4074-a9a2-e7b70c0e0e57"),
                            CategoryId = new Guid("bd77f010-5ba6-4187-90cd-a75b233e8aa8"),
                            DataCreate = new DateTime(2024, 3, 26, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 28, 7, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Description = "Description8",
                            Name = "Name8",
                            Price = 8.99m,
                            UserId = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7")
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bbcf295f-ebba-4e57-b41d-c77a2607d7e7"),
                            DataCreate = new DateTime(2024, 3, 19, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            DataUpdate = new DateTime(2024, 3, 24, 15, 16, 30, 830, DateTimeKind.Utc).AddTicks(3923),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "/4Ghb972aE6OHL5FqCR+TSJwigk7+5nQpJL+mbTa+Ho=",
                            PasswordSalt = "joloXR6SCEcCQIcGx/RXOg=="
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Product", null)
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.FileRelation", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithMany("FileRelations")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.BackApp.Domain.Entity.FileDetails", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("FileRelations");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
