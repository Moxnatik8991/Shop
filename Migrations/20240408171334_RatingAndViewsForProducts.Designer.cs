// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.BackApp.Domain;

#nullable disable

namespace Shop.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240408171334_RatingAndViewsForProducts")]
    partial class RatingAndViewsForProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0d12fa10-a331-4830-9991-3be965de771a"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Ноутбуки и компьютеры"
                        },
                        new
                        {
                            Id = new Guid("73090c57-f2e0-4243-af06-b33f88701e36"),
                            CategoryId = new Guid("0d12fa10-a331-4830-9991-3be965de771a"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Ноутбуки"
                        },
                        new
                        {
                            Id = new Guid("6420b9b5-5a96-435e-9f4b-9cb00bf85963"),
                            CategoryId = new Guid("0d12fa10-a331-4830-9991-3be965de771a"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Компьютеры"
                        },
                        new
                        {
                            Id = new Guid("f2be7a27-a29e-46e4-8b04-8763653ffc5a"),
                            CategoryId = new Guid("0d12fa10-a331-4830-9991-3be965de771a"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Мониторы"
                        },
                        new
                        {
                            Id = new Guid("a2e3b6b9-bf11-48bd-a20d-3a5495b03644"),
                            CategoryId = new Guid("0d12fa10-a331-4830-9991-3be965de771a"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Планшеты"
                        },
                        new
                        {
                            Id = new Guid("094cb01e-61b7-429b-8aaf-cde202f2ba80"),
                            CategoryId = new Guid("0d12fa10-a331-4830-9991-3be965de771a"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Компьютерные комплектующие"
                        },
                        new
                        {
                            Id = new Guid("7eae1ba8-531c-4047-8066-52b79b89b8d4"),
                            CategoryId = new Guid("094cb01e-61b7-429b-8aaf-cde202f2ba80"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Материнские платы"
                        },
                        new
                        {
                            Id = new Guid("cdf06acd-121b-4a64-8aca-57cb8016eca2"),
                            CategoryId = new Guid("094cb01e-61b7-429b-8aaf-cde202f2ba80"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Процессоры"
                        },
                        new
                        {
                            Id = new Guid("6861b9f8-64d8-4083-bdac-06878534c978"),
                            CategoryId = new Guid("094cb01e-61b7-429b-8aaf-cde202f2ba80"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Оперативная память"
                        },
                        new
                        {
                            Id = new Guid("41383c13-24b5-4a12-b3eb-bf22bcda0c18"),
                            CategoryId = new Guid("094cb01e-61b7-429b-8aaf-cde202f2ba80"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Видеокарты"
                        },
                        new
                        {
                            Id = new Guid("af421121-80c4-49c2-9162-a9cc2511534e"),
                            CategoryId = new Guid("094cb01e-61b7-429b-8aaf-cde202f2ba80"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Звуковые карты"
                        },
                        new
                        {
                            Id = new Guid("3975a26e-0e2c-4342-b9e3-f60f306bba1d"),
                            CategoryId = new Guid("094cb01e-61b7-429b-8aaf-cde202f2ba80"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Жесткие диски"
                        },
                        new
                        {
                            Id = new Guid("f1127796-9ad1-406a-8cf7-cb9cc0df028d"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Смартфоны, ТВ и Электроника"
                        },
                        new
                        {
                            Id = new Guid("3020de21-8579-486c-bc4e-724391e1eb30"),
                            CategoryId = new Guid("f1127796-9ad1-406a-8cf7-cb9cc0df028d"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Мобильные телефоны"
                        },
                        new
                        {
                            Id = new Guid("4b32eb0f-3651-4b29-b185-37f830ae59ca"),
                            CategoryId = new Guid("f1127796-9ad1-406a-8cf7-cb9cc0df028d"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Телевизоры"
                        },
                        new
                        {
                            Id = new Guid("55c7b332-c964-4d12-a2c4-405716731491"),
                            CategoryId = new Guid("f1127796-9ad1-406a-8cf7-cb9cc0df028d"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Наушники и аксессуары"
                        },
                        new
                        {
                            Id = new Guid("befe882c-f59c-4359-9cea-3b056845b42d"),
                            CategoryId = new Guid("f1127796-9ad1-406a-8cf7-cb9cc0df028d"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Носимые гаджеты"
                        },
                        new
                        {
                            Id = new Guid("41a9068c-419c-4408-a8a2-bfab020a55ca"),
                            CategoryId = new Guid("befe882c-f59c-4359-9cea-3b056845b42d"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Смарт-часы"
                        },
                        new
                        {
                            Id = new Guid("a5ac2baf-465f-45a3-b241-5598a67af1cd"),
                            CategoryId = new Guid("befe882c-f59c-4359-9cea-3b056845b42d"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "3D и VR очки"
                        },
                        new
                        {
                            Id = new Guid("8d0d8a70-a42e-4164-8cbc-eef9dc6a247d"),
                            CategoryId = new Guid("befe882c-f59c-4359-9cea-3b056845b42d"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Фитнес-браслеты"
                        },
                        new
                        {
                            Id = new Guid("72c6c691-ac3d-41f8-b147-5e19b86ebdf2"),
                            CategoryId = new Guid("befe882c-f59c-4359-9cea-3b056845b42d"),
                            DataCreate = new DateTime(2024, 3, 25, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Name = "Смарт-кольца"
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.FileDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FileDetails");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae5e5e8b-4765-4c97-b5d9-689dc1451d11"),
                            CategoryId = new Guid("094cb01e-61b7-429b-8aaf-cde202f2ba80"),
                            DataCreate = new DateTime(2024, 4, 3, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 6, 3, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Burns for 10 hours",
                            Name = "Lamp",
                            Price = 11.11m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        },
                        new
                        {
                            Id = new Guid("80c373da-6036-4d86-b4ad-a5213e8b0015"),
                            CategoryId = new Guid("6861b9f8-64d8-4083-bdac-06878534c978"),
                            DataCreate = new DateTime(2024, 4, 6, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 3, 8, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Rubber under your foot",
                            Name = "Slippers",
                            Price = 11.11m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        },
                        new
                        {
                            Id = new Guid("fde6974f-2ffa-408a-970b-62213a632707"),
                            CategoryId = new Guid("3975a26e-0e2c-4342-b9e3-f60f306bba1d"),
                            DataCreate = new DateTime(2024, 4, 7, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 7, 16, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Description1",
                            Name = "Name1",
                            Price = 1.99m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        },
                        new
                        {
                            Id = new Guid("a1a0ef5b-7d24-46d6-9b6e-60b6b3bdc343"),
                            CategoryId = new Guid("a5ac2baf-465f-45a3-b241-5598a67af1cd"),
                            DataCreate = new DateTime(2024, 4, 6, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 6, 15, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Description2",
                            Name = "Name2",
                            Price = 2.99m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        },
                        new
                        {
                            Id = new Guid("ac1986d8-075d-4d19-995f-dc9ed07d9514"),
                            CategoryId = new Guid("3975a26e-0e2c-4342-b9e3-f60f306bba1d"),
                            DataCreate = new DateTime(2024, 4, 5, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 5, 14, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Description3",
                            Name = "Name3",
                            Price = 3.99m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        },
                        new
                        {
                            Id = new Guid("588981df-51fa-498e-a688-d38905db7620"),
                            CategoryId = new Guid("73090c57-f2e0-4243-af06-b33f88701e36"),
                            DataCreate = new DateTime(2024, 4, 4, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 4, 13, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Description4",
                            Name = "Name4",
                            Price = 4.99m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        },
                        new
                        {
                            Id = new Guid("5e9dbf5e-edf7-4c70-b1ab-fb89fc9ceaec"),
                            CategoryId = new Guid("4b32eb0f-3651-4b29-b185-37f830ae59ca"),
                            DataCreate = new DateTime(2024, 4, 3, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 3, 12, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Description5",
                            Name = "Name5",
                            Price = 5.99m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        },
                        new
                        {
                            Id = new Guid("10c4e485-6f9a-45e0-9cff-ea7371baa807"),
                            CategoryId = new Guid("73090c57-f2e0-4243-af06-b33f88701e36"),
                            DataCreate = new DateTime(2024, 4, 2, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 2, 11, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Description6",
                            Name = "Name6",
                            Price = 6.99m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        },
                        new
                        {
                            Id = new Guid("542d04a2-c5e4-4ca8-84c0-9318a578d0af"),
                            CategoryId = new Guid("befe882c-f59c-4359-9cea-3b056845b42d"),
                            DataCreate = new DateTime(2024, 4, 1, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 1, 10, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Description7",
                            Name = "Name7",
                            Price = 7.99m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        },
                        new
                        {
                            Id = new Guid("09628500-b5ed-4b91-a1c9-76c2b38e33ed"),
                            CategoryId = new Guid("0d12fa10-a331-4830-9991-3be965de771a"),
                            DataCreate = new DateTime(2024, 3, 31, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 4, 2, 9, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Description = "Description8",
                            Name = "Name8",
                            Price = 8.99m,
                            Rating = 0m,
                            UserId = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            Views = 0L
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("eb5f0ac4-bd7c-4333-908d-2d2fbfd44d42"),
                            DataCreate = new DateTime(2024, 3, 24, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            DataUpdate = new DateTime(2024, 3, 29, 17, 13, 34, 562, DateTimeKind.Utc).AddTicks(8687),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "ghmZkf+TsVE2OOnjg1bJAjPSsy2G1RyTQFy0yq8Nc1g=",
                            PasswordSalt = "KKLFHmL4/hfCgrfdCsrN1Q=="
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.CategoryFileDetails", b =>
                {
                    b.HasBaseType("Shop.BackApp.Domain.Entity.FileDetails");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("CategoryFileDetails");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.ProductFileDetailse", b =>
                {
                    b.HasBaseType("Shop.BackApp.Domain.Entity.FileDetails");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("ProductFileDetailse");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Product", null)
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.CategoryFileDetails", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithOne("File")
                        .HasForeignKey("Shop.BackApp.Domain.Entity.CategoryFileDetails", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.ProductFileDetailse", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Product", null)
                        .WithMany("Files")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
