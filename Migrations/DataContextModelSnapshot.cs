// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.BackApp.Domain;

#nullable disable

namespace Shop.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34b94ae4-9801-445a-aed6-b22986566e77"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Ноутбуки и компьютеры"
                        },
                        new
                        {
                            Id = new Guid("f490b0ac-a979-43da-a528-0f21b63eef92"),
                            CategoryId = new Guid("34b94ae4-9801-445a-aed6-b22986566e77"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Ноутбуки"
                        },
                        new
                        {
                            Id = new Guid("2d70da78-8914-429c-846d-f862449e707f"),
                            CategoryId = new Guid("34b94ae4-9801-445a-aed6-b22986566e77"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Компьютеры"
                        },
                        new
                        {
                            Id = new Guid("dc8130cd-b257-4738-92a3-0219728489b4"),
                            CategoryId = new Guid("34b94ae4-9801-445a-aed6-b22986566e77"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Мониторы"
                        },
                        new
                        {
                            Id = new Guid("5ac0739d-d6b6-46f0-b229-6860190917ce"),
                            CategoryId = new Guid("34b94ae4-9801-445a-aed6-b22986566e77"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Планшеты"
                        },
                        new
                        {
                            Id = new Guid("53360d33-b29b-4537-9b54-6092ed007215"),
                            CategoryId = new Guid("34b94ae4-9801-445a-aed6-b22986566e77"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Компьютерные комплектующие"
                        },
                        new
                        {
                            Id = new Guid("ca550976-6ec3-45a3-87ea-6636d2a649fa"),
                            CategoryId = new Guid("53360d33-b29b-4537-9b54-6092ed007215"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Материнские платы"
                        },
                        new
                        {
                            Id = new Guid("a806cb1f-3f4b-446a-8110-de75144d6569"),
                            CategoryId = new Guid("53360d33-b29b-4537-9b54-6092ed007215"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Процессоры"
                        },
                        new
                        {
                            Id = new Guid("cb202d74-b689-49a2-8c9c-397f8f6e693b"),
                            CategoryId = new Guid("53360d33-b29b-4537-9b54-6092ed007215"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Оперативная память"
                        },
                        new
                        {
                            Id = new Guid("80210cc8-e686-4a82-b1d9-85dad60f0a4c"),
                            CategoryId = new Guid("53360d33-b29b-4537-9b54-6092ed007215"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Видеокарты"
                        },
                        new
                        {
                            Id = new Guid("560979c6-6bac-43da-b5d5-b66bcdd999cb"),
                            CategoryId = new Guid("53360d33-b29b-4537-9b54-6092ed007215"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Звуковые карты"
                        },
                        new
                        {
                            Id = new Guid("0415ae8f-df2d-4bd8-9d9b-06e1ab5a80f9"),
                            CategoryId = new Guid("53360d33-b29b-4537-9b54-6092ed007215"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Жесткие диски"
                        },
                        new
                        {
                            Id = new Guid("ceed9c73-6fc2-44c9-8107-b49c04774c37"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Смартфоны, ТВ и Электроника"
                        },
                        new
                        {
                            Id = new Guid("3c7020c7-837f-42ff-9b78-e98488de73ba"),
                            CategoryId = new Guid("ceed9c73-6fc2-44c9-8107-b49c04774c37"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Мобильные телефоны"
                        },
                        new
                        {
                            Id = new Guid("ad997198-40eb-49ec-8598-b0e9597a5896"),
                            CategoryId = new Guid("ceed9c73-6fc2-44c9-8107-b49c04774c37"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Телевизоры"
                        },
                        new
                        {
                            Id = new Guid("12816644-226d-4d09-b7c9-5eb22fbcef4b"),
                            CategoryId = new Guid("ceed9c73-6fc2-44c9-8107-b49c04774c37"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Наушники и аксессуары"
                        },
                        new
                        {
                            Id = new Guid("34bc641e-3e8a-44ba-9402-417e6af12d8e"),
                            CategoryId = new Guid("ceed9c73-6fc2-44c9-8107-b49c04774c37"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Носимые гаджеты"
                        },
                        new
                        {
                            Id = new Guid("0ccd4c3c-f2e6-468d-beb4-10a4f7820458"),
                            CategoryId = new Guid("34bc641e-3e8a-44ba-9402-417e6af12d8e"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Смарт-часы"
                        },
                        new
                        {
                            Id = new Guid("6f184ba8-b725-4c35-bb22-e18e7489d257"),
                            CategoryId = new Guid("34bc641e-3e8a-44ba-9402-417e6af12d8e"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "3D и VR очки"
                        },
                        new
                        {
                            Id = new Guid("f9548cc7-ea16-492f-88cb-c11c44c95cab"),
                            CategoryId = new Guid("34bc641e-3e8a-44ba-9402-417e6af12d8e"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Фитнес-браслеты"
                        },
                        new
                        {
                            Id = new Guid("3daff5eb-68de-4ab6-9a16-bf03c1cca491"),
                            CategoryId = new Guid("34bc641e-3e8a-44ba-9402-417e6af12d8e"),
                            DataCreate = new DateTime(2024, 3, 21, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Name = "Смарт-кольца"
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.FileDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FileDetails");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FileDetails");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3578fb32-5fe9-4e69-9056-f367dc2f9f33"),
                            CategoryId = new Guid("34bc641e-3e8a-44ba-9402-417e6af12d8e"),
                            DataCreate = new DateTime(2024, 3, 30, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 4, 2, 4, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Burns for 10 hours",
                            Name = "Lamp",
                            Price = 11.11m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        },
                        new
                        {
                            Id = new Guid("28b9823e-810c-40fb-ab83-1f7879acd0dd"),
                            CategoryId = new Guid("3daff5eb-68de-4ab6-9a16-bf03c1cca491"),
                            DataCreate = new DateTime(2024, 4, 2, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 30, 9, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Rubber under your foot",
                            Name = "Slippers",
                            Price = 11.11m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        },
                        new
                        {
                            Id = new Guid("4d0d1d48-646a-461c-a653-26a2654e1b4d"),
                            CategoryId = new Guid("53360d33-b29b-4537-9b54-6092ed007215"),
                            DataCreate = new DateTime(2024, 4, 3, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 4, 3, 17, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Description1",
                            Name = "Name1",
                            Price = 1.99m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        },
                        new
                        {
                            Id = new Guid("5c6e80f4-bc80-4a39-86f6-5c2c76e2d6ce"),
                            CategoryId = new Guid("80210cc8-e686-4a82-b1d9-85dad60f0a4c"),
                            DataCreate = new DateTime(2024, 4, 2, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 4, 2, 16, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Description2",
                            Name = "Name2",
                            Price = 2.99m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        },
                        new
                        {
                            Id = new Guid("3930bc03-5406-4f30-b7ee-5c7d72d3235f"),
                            CategoryId = new Guid("dc8130cd-b257-4738-92a3-0219728489b4"),
                            DataCreate = new DateTime(2024, 4, 1, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 4, 1, 15, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Description3",
                            Name = "Name3",
                            Price = 3.99m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        },
                        new
                        {
                            Id = new Guid("12a3908a-87c3-4efd-b106-e461ffc559b3"),
                            CategoryId = new Guid("3daff5eb-68de-4ab6-9a16-bf03c1cca491"),
                            DataCreate = new DateTime(2024, 3, 31, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 31, 14, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Description4",
                            Name = "Name4",
                            Price = 4.99m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        },
                        new
                        {
                            Id = new Guid("87991b3d-3a75-421e-acc7-a61c29c64b90"),
                            CategoryId = new Guid("2d70da78-8914-429c-846d-f862449e707f"),
                            DataCreate = new DateTime(2024, 3, 30, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 30, 13, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Description5",
                            Name = "Name5",
                            Price = 5.99m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        },
                        new
                        {
                            Id = new Guid("09dcf1d5-3278-4a8a-b6d8-1d5cb05c6825"),
                            CategoryId = new Guid("3c7020c7-837f-42ff-9b78-e98488de73ba"),
                            DataCreate = new DateTime(2024, 3, 29, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 29, 12, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Description6",
                            Name = "Name6",
                            Price = 6.99m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        },
                        new
                        {
                            Id = new Guid("1c4bdda9-15f7-479d-8caf-e6bdf3e0656f"),
                            CategoryId = new Guid("80210cc8-e686-4a82-b1d9-85dad60f0a4c"),
                            DataCreate = new DateTime(2024, 3, 28, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 28, 11, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Description7",
                            Name = "Name7",
                            Price = 7.99m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        },
                        new
                        {
                            Id = new Guid("286528d6-9230-45de-9bdb-2222773ea79f"),
                            CategoryId = new Guid("12816644-226d-4d09-b7c9-5eb22fbcef4b"),
                            DataCreate = new DateTime(2024, 3, 27, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 29, 10, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Description = "Description8",
                            Name = "Name8",
                            Price = 8.99m,
                            UserId = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d")
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCreate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("07389218-fb2d-4a0e-94e6-9e23b70bb14d"),
                            DataCreate = new DateTime(2024, 3, 20, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            DataUpdate = new DateTime(2024, 3, 25, 18, 5, 30, 862, DateTimeKind.Utc).AddTicks(8105),
                            Email = "admin@admin.com",
                            FirstName = "Admin",
                            LastName = "Admin",
                            PasswordHash = "UubpeFG2udOsIY6Kj3U7FxupJ87XR7d4prQ70XdrkBE=",
                            PasswordSalt = "NCLWfu26Zto5EOevHDZn/g=="
                        });
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.CategoryFileDetails", b =>
                {
                    b.HasBaseType("Shop.BackApp.Domain.Entity.FileDetails");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CategoryId")
                        .IsUnique()
                        .HasFilter("[CategoryId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("CategoryFileDetails");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.ProductFileDetailse", b =>
                {
                    b.HasBaseType("Shop.BackApp.Domain.Entity.FileDetails");

                    b.Property<byte>("Order")
                        .HasColumnType("tinyint");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("ProductId");

                    b.HasDiscriminator().HasValue("ProductFileDetailse");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithMany("Categories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Comment", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Product", null)
                        .WithMany("Comments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.CategoryFileDetails", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Category", null)
                        .WithOne("File")
                        .HasForeignKey("Shop.BackApp.Domain.Entity.CategoryFileDetails", "CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.ProductFileDetailse", b =>
                {
                    b.HasOne("Shop.BackApp.Domain.Entity.Product", null)
                        .WithMany("Files")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Category", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Shop.BackApp.Domain.Entity.Product", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
